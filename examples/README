Three examples of the solver selecter

1. dummy.C is a silly example.
  Run " dummy.ss --buildfromfile 1 " 
      to build a database based on the input file based on some "matrices" (doubles in this case)


  Run " dummy.ss --buildinline 1 --tests 10 " 
      Performs tests inline over the parameter space defined in dummy.input. This
      is what we will need to do for matrix free methods because we cant dump the 
      matrices beforehand. 

  Rin "dummy.ss" 
      This actually uses the solver selecter to solve pick the best solver and solve the problem. 
      This problem is pretty simple. The "matrix" is a double between 0 and 5. We pretend the solve time
      is determined by the matrix A, according to the formula, ST = (A-c)^2 +c + 1, where C is a integer
      parameter of the "solver". So, the job of the solver selecter is to pick "c" such that it minimizes
      the solve time. In this run, we perform "10000" tests ( set by --tests xx ) with random matricies using the 
      database built in the previous steps ( it blows up if the db is empty ) . It should pick a good
      solver about 96 percent of the time, and the perfect solver about 50%.   

  Run "petscex1.ss --buildf 1"
      Builds a database based on the matricies and parameter space defined in the petsc.input file
  Run "petscex1.ss --buildi 1" 
      to solves the matrix on each node of the parameter space and adds results to the 
      database (same as buildinline above)
  Run "petscex1.ss "
      uses the solver selecter to find the best solver and solve the system, based on the database. This
      doesn;t work if the database is empty, so run one of the other commands first. 

  Same as above for petscex2, except the matrix used is pulled from the petsc.matrices directory. The
  example above uses a tridiagonal matrix of size 100000**2, which is large, but also really easy to solve. 
  The matrix is ex2 is apparently somewhat more difficult. 

                          
